.TH KAKOUNE 1 "" "" "OPTIONS"

.SS Types
.TP
.BR int
an integer number
.TP
.BR bool
a boolean value, yes/true or no/false
.TP
.BR str
a string, some freeform text
.TP
.BR coord
a line, column pair (separated by comma)
.TP
.BR regex
as a string but the set commands will complain if the entered text is not a valid regex
.TP
.BR int-list,\ str-list
a list, elements are separated by a colon (:) if an element needs to contain a colon, it can be escaped with a backslash
.TP
.BR enum(value1|value2|…)
an enum, taking one of the given values
.TP
.BR flags(value1|value2|…)
a set of flags, taking a combination of the given values joined by a '|' character

.SS Scopes
.TP
.BR window
context linked to the window displaying a buffer
.TP
.BR buffer
context linked directly to the buffer
.TP
.BR global
global context linked to the instance of Kakoune
.RE

Options can have individual values that change from one scope to the other, which will be considered one after another in the following order:
.IR window " → "
.IR buffer " → "
.IR global "."
That means that two windows on the same buffer can use different options (e.g. different
.IR filetype ")."
However some options might end up being ignored if their scope is not in the command context.
For example, writing a file never uses the
.IR window
scope when considering options, so any option related to writing won't be taken into account if set in the
.IR window
scope (e.g.
.IR BOM ", "
.IR eolformat ")."

.SS Builtin options
.TP
.BR tabstop
.IR int
width of a tab character
.TP
.BR indentwidth
.IR int
width (in spaces) used for indentation, 0 means a tab character
.TP
.BR scrolloff
.IR coord
number of lines, columns to keep visible around the cursor when scrolling
.TP
.BR eolformat
.IR enum(lf|crlf)
the format of end of lines when writing a buffer, this is autodetected on load
.TP
.BR BOM
.IR enum(none|utf8)
define if the file should be written with an unicode byte order mark
.TP
.BR complete_prefix
.IR bool
when completing in command line, and multiple candidates exist, enable completion with common prefix
.TP
.BR incsearch
.IR bool
execute search as it is typed
.TP
.BR aligntab
.IR bool
use tabs for alignement command
.TP
.BR autoinfo
.IR flags(command|onkey|normal)
display automatic information box in the enabled contexts
.TP
.BR autoshowcompl
.IR bool
automatically display possible completions when editing a prompt
.TP
.BR ignored_files
.IR regex
filenames matching this regex wont be considered as candidates on filename completion (except if the text being completed already matches it)
.TP
.BR disabled_hooks
.IR regex
hooks whose group matches this regex wont be executed. For example indentation hooks can be disabled with '.*-indent'
.TP
.BR filetype
.IR str
arbitrary string defining the type of the file filetype dependant actions should hook on this option changing for activation/deactivation
.TP
.BR path
.IR str-list
directories to search for gf command
.TP
.BR completers
.IR str-list
completion engines to use for insert mode completion (they are tried in order until one generates candidates). Existing completers are:
.TP
.BR word=all,\ word=buffer
which complete using words in all buffers (
.IR word=all " )"
or only the current one (
.IR word=buffer " )"
.TP
.BR filename
which tries to detect when a filename is being entered and provides completion based on local filesystem
.TP
.BR option=<opt-name>
where
.IR <opt-name>
is a
.IR str-list
option. The first element of the list should follow the format:
.IR <line>.<column>[+<length>]@<timestamp>
to define where the completion apply in the buffer, and the other strings are the candidates
.TP
.BR static_words
.IR str-list
list of words that are always added to completion candidates when completing words in insert mode
.TP
.BR autoreload
.IR enum(yes|no|ask)
auto reload the buffers when an external modification is detected
.TP
.BR debug
.IR flags(hooks|shell|profile)
dump various debug information in the `*debug*` buffer
.TP
.BR modelinefmt
.IR string
A format string used to generate the mode line, that string is first expanded as a command line would be (expanding
.IR %...{...}
strings), then markup tags are applied (c.f. Expansions documentation page)
.TP
.BR ui_options
colon separated list of key=value pairs that are forwarded to the user interface implementation. The NCurses UI support the following options:

.RS 7
.BR ncurses_set_title
if
.IR yes
or
.IR true ","
the terminal emulator title will be changed
.TP
.BR ncurses_status_on_top
if
.IR yes ","
or
.IR true
the status line will be placed at the top of the terminal rather than at the bottom
.TP
.BR ncurses_assistant
specify the nice assistant you get in info boxes, can be
.IR clippy
(the default),
.IR cat
or
.IR none
.TP
.BR ncurses_wheel_down_button,\ ncurses_wheel_up_button
specify which button send for wheel down/up events
