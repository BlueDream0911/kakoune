* Improve unicode text edition

  - support reading/writing non utf8 encoded files

  - more robust utf8 implementation

  - support multi column chars

  - right-to-left, bidirectional text

* Mouse support

* Crash recovery support (swap files)

* Sanitize prompt history handling, hooks should not have side effects
  on history

* improve highlighters

  - folding support

  - Hierarchical, highlight some way inside a region, another way outside

  - other types of highlighters (like for correctly supporting nesting,
    which regex are bad at), faster as well.

* improve info boxes

  - More automatic hiding behaviour

  - Move info handling to client

    . remove direct ui access from context

    . Add support for 'transient' info, displayed for a certain
      amount of time

* improve insert completion

  - Detect when the following text is matching the inserted completion

  - Support multiple completion points
    (1.1@0:comp1:comp2:comp3:1.5@0:comp1:comp2:comp3)

  - smarter behaviour to keep completion available longer

    . keep per line timestamps

    . update completion options when lines are added/deleted

* spelling support

* allow colalias to reference another colalias

* investigate 'kakdiff'

* Tree based undo

* configurable evaluated (%sh{...}) strings ? use an option to define
  the interpreters, regex for finding used kak variables (ability to
  add direct python/perl/ruby/whatever evaluation).

* Optimize BufferModificationListener behaviour:

  - Editor should modify in reverse order, as a modification at one point does not
    impact the position of selections before it, so applying modification in reverse
    order removes the needs to have selection updated on the fly, and permit deferred
    update.

  - Accumulate all the modifications and update the selections with the
    whole knowledge -> try to remove this O(n2) behaviour.

* User defined text objects

* multiple parameters support for normal mode commands ?

  - 10,20g -> goto line 10, column 20

  - 1,2,3<a-space> remove selections 1, 2 and 3

* Make kakoune self-documenting

  - Add doc strings to options

  - Generate documentation from Kakoune source

    . Write asciidoc from internal documentation

    . make doc compiles kakoune, and run doc generation:
      +./kak -help commands > ../doc/commands.asciidoc+
      with README.asciidoc including commands ?

* Rewrite keymap support using options ? (map window insert a b -> set -add window insert_keymap a:b)

* support for :cnext :cprev

  - save the current error line in a buffer option

  - highlight the current error line (only it's bg)

  - find next error from the line

* Fix 'n' command with inverted selection

* Comments and strings should be more integrated than just highlighting, matching chars
  for example should be strings and comments aware
